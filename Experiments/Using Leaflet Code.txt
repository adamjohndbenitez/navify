# shinydashboard::menuItem(text = "Using Leaflet Map", tabName = "leafletMap", icon = shiny::icon(name = "map", class = "fa-1x", lib = "font-awesome")),

# shinydashboard::tabItem(tabName = "leafletMap",
#   shiny::fluidRow(
#     leaflet::leafletOutput("mymap"),
#     shiny::tags$p(),
#     shiny::actionButton("recalc", "New points")
#   )
# ),

# output$mymap <- leaflet::renderLeaflet({
#   leaflet::leaflet() %>%
#     leaflet::addTiles() %>%  # Add default OpenStreetMap map tiles
#     leaflet::setView(lng=123.89071, lat=10.31672, zoom = 15)
# })


# observeEvent(input$showMap, {
  #   # initialize variables for depth first search
  #     dfsEnv$vis <- hash::hash()
  #     dfsEnv$path <- c()
  #     dfsEnv$allPaths <- list()
  #     street_nodes <- 34
  #     for (i in 1:street_nodes) {
  #       hash::.set(dfsEnv$vis, keys=i, values=FALSE)
  #     }
  #     dfs(loadDataByStreetName(input$locationSearchId)$street_id,
  #         loadDataByStreetName(input$destinationSearchId)$street_id)
  #     print(dfsEnv$allPaths)
  #
  #   output$DFSmap <- leaflet::renderLeaflet({
  #     m <- leaflet::leaflet()
  #     m <- leaflet::addTiles(m)
  #     m <- leaflet::addMarkers(map = m, lng = loadDataByStreetName(input$locationSearchId)$longitude,
  #                           lat = loadDataByStreetName(input$locationSearchId)$latitude,
  #                           popup = input$locationSearchId)
  #     m <- leaflet::addMarkers(map = m, lng = loadDataByStreetName(input$destinationSearchId)$longitude,
  #                           lat = loadDataByStreetName(input$destinationSearchId)$latitude,
  #                           popup = input$destinationSearchId)
  #     for (j in 1:length(dfsEnv$allPaths)) {
  #       for (i in 1:length(dfsEnv$allPaths[[j]])) {
  #         if (!gtools::invalid(loadDataByStreetId(dfsEnv$allPaths[[j]][i+1]))) {
  #           m <- leaflet::addPolylines(map = m, lng=c(round(loadDataByStreetId(dfsEnv$allPaths[[j]][i])$longitude, digits = 6),
  #                                       round(loadDataByStreetId(dfsEnv$allPaths[[j]][i+1])$longitude, digits = 6)),
  #                                 lat=c(round(loadDataByStreetId(dfsEnv$allPaths[[j]][i])$latitude, digits = 6),
  #                                       round(loadDataByStreetId(dfsEnv$allPaths[[j]][i+1])$latitude,  digits = 6)), stroke = TRUE, color = "black", weight = 5, opacity = 0.7, fill = FALSE, fillColor = "black", fillOpacity = 0.5, dashArray = NULL, smoothFactor = 1, noClip = TRUE, popup = "pull something")
  #         }
  #       }
  #     }
  #     m
  #   })
  # })
  
  # for (i in 1:length(street_ids)) {
#   if (!gtools::invalid(loadDataByStreetId(street_ids[i+1]))) {
#     m <- leaflet::addPolylines(map = m, lng=c(round(loadDataByStreetId(street_ids[i])$longitude, digits = 6),
#                                               round(loadDataByStreetId(street_ids[i+1])$longitude, digits = 6)),
#                                lat=c(round(loadDataByStreetId(street_ids[i])$latitude, digits = 6),
#                                      round(loadDataByStreetId(street_ids[i+1])$latitude,  digits = 6)), stroke = TRUE, color = "black", weight = 5, opacity = 0.7, fill = FALSE, fillColor = "black", fillOpacity = 0.5, dashArray = NULL, smoothFactor = 1, noClip = TRUE, popup = "pull something")
#   }
# }